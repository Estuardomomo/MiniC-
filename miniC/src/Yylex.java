/* The following code was generated by JFlex 1.6.1 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archivo de salida
    public String toString() {
        return "Token #"+numToken+": "+token+" C.Lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
}

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/User_Len/Documents/GitHub/MiniC-/miniC/build/classes/miniC.flex</tt>
 */

class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\35\1\42\1\42\1\36\22\0\1\37\1\55\1\52"+
    "\2\0\1\56\1\53\1\50\1\61\1\62\1\44\1\46\1\60\1\46"+
    "\1\47\1\41\1\45\11\45\1\0\1\60\1\55\1\57\1\55\2\0"+
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\12\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\12\1\65\1\51\1\66\1\0"+
    "\1\12\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\12\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\12\1\63\1\54"+
    "\1\64\1\0\6\34\1\43\32\34\1\40\137\34\60\0\2\31\115\0"+
    "\1\32\u1500\0\1\37\u097f\0\13\37\35\0\1\42\1\42\5\0\1\37"+
    "\57\0\1\37\312\0\1\33\u0ed5\0\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\16\2\2\1\2\3\2\4\1\1\1\4"+
    "\1\5\4\1\1\4\3\5\13\2\1\6\12\2\1\6"+
    "\3\0\1\7\2\0\1\10\4\0\1\11\3\0\7\2"+
    "\1\0\2\2\1\6\2\2\2\6\3\2\1\0\2\2"+
    "\1\0\1\2\2\0\1\6\6\0\1\2\1\6\3\2"+
    "\1\0\3\2\1\0\6\2\1\0\1\10\1\2\2\0"+
    "\1\10\3\0\1\2\1\6\1\2\1\0\2\2\2\10"+
    "\6\2\4\0\2\2\1\0\1\6\5\2\2\0\1\2"+
    "\1\10\1\6\4\2\2\0\4\2\1\6\1\0\3\2"+
    "\1\6\2\2\1\6\1\2\1\10\24\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\67\0\u03de\0\u0415\0\67\0\u044c\0\u0483"+
    "\0\67\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u0672\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\67"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u044c\0\u0c08\0\u0c3f"+
    "\0\u0c76\0\u0cad\0\u04ba\0\67\0\u0ce4\0\u04f1\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0d52\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u13fb\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u18b5\0\67"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1bee\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e14\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u1f95\0\u2071\0\u20a8\0\u20df\0\u2116\0\u20a8"+
    "\0\u214d\0\u2184\0\u214d\0\u21bb\0\u21bb\0\u21f2\0\u2229\0\u2260"+
    "\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418"+
    "\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\4\3\1\13\2\3\1\14\1\15\1\16"+
    "\1\3\1\17\1\20\2\3\1\21\1\22\2\2\1\23"+
    "\1\24\2\23\1\25\2\23\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\26\1\36"+
    "\1\31\1\37\1\31\1\40\1\31\1\41\1\31\70\0"+
    "\30\42\3\0\1\42\3\0\1\42\2\0\1\42\1\0"+
    "\1\42\22\0\16\42\1\43\1\42\1\44\7\42\3\0"+
    "\1\42\3\0\1\42\2\0\1\42\1\0\1\42\22\0"+
    "\13\42\1\45\14\42\3\0\1\42\3\0\1\42\2\0"+
    "\1\42\1\0\1\42\22\0\4\42\1\46\11\42\1\47"+
    "\11\42\3\0\1\42\3\0\1\42\2\0\1\42\1\0"+
    "\1\42\22\0\13\42\1\50\12\42\1\51\1\42\3\0"+
    "\1\42\3\0\1\42\2\0\1\42\1\0\1\42\22\0"+
    "\1\52\15\42\1\53\11\42\3\0\1\42\3\0\1\42"+
    "\2\0\1\42\1\0\1\42\22\0\4\42\1\54\23\42"+
    "\3\0\1\42\3\0\1\42\2\0\1\42\1\0\1\42"+
    "\22\0\5\42\1\55\6\42\1\56\1\57\12\42\3\0"+
    "\1\42\3\0\1\42\2\0\1\42\1\0\1\42\22\0"+
    "\4\42\1\60\16\42\1\61\4\42\3\0\1\42\3\0"+
    "\1\42\2\0\1\42\1\0\1\42\22\0\4\42\1\62"+
    "\23\42\3\0\1\42\3\0\1\42\2\0\1\42\1\0"+
    "\1\42\22\0\22\42\1\63\5\42\3\0\1\42\3\0"+
    "\1\42\2\0\1\42\1\0\1\42\22\0\7\42\1\64"+
    "\10\42\1\65\7\42\3\0\1\42\3\0\1\42\2\0"+
    "\1\42\1\0\1\42\22\0\16\42\1\66\11\42\3\0"+
    "\1\42\3\0\1\42\2\0\1\42\1\0\1\42\22\0"+
    "\7\42\1\67\20\42\3\0\1\42\3\0\1\42\2\0"+
    "\1\42\1\0\1\42\27\0\1\70\6\0\1\71\1\72"+
    "\73\0\1\73\100\0\1\23\72\0\1\74\2\0\1\75"+
    "\67\0\1\76\1\0\1\77\23\0\1\100\3\0\1\101"+
    "\34\0\1\102\21\0\50\103\1\104\1\105\15\103\51\106"+
    "\1\107\1\104\14\106\53\0\1\26\67\0\1\26\71\0"+
    "\1\26\71\0\1\31\70\0\1\31\70\0\1\31\1\0"+
    "\30\110\3\0\1\110\3\0\1\110\2\0\1\110\1\0"+
    "\1\110\22\0\16\110\1\111\11\110\3\0\1\110\3\0"+
    "\1\110\2\0\1\110\1\0\1\110\22\0\4\110\1\112"+
    "\23\110\3\0\1\110\3\0\1\110\2\0\1\110\1\0"+
    "\1\110\22\0\1\113\27\110\3\0\1\110\3\0\1\110"+
    "\2\0\1\110\1\0\1\110\22\0\2\110\1\114\25\110"+
    "\3\0\1\110\3\0\1\110\2\0\1\110\1\0\1\110"+
    "\22\0\23\110\1\115\4\110\3\0\1\110\3\0\1\110"+
    "\2\0\1\110\1\0\1\110\22\0\21\110\1\116\6\110"+
    "\1\0\1\117\1\0\1\110\3\0\1\110\2\0\1\110"+
    "\1\0\1\110\22\0\22\110\1\120\5\110\3\0\1\110"+
    "\3\0\1\110\2\0\1\110\1\0\1\110\22\0\13\110"+
    "\1\121\14\110\3\0\1\110\3\0\1\110\2\0\1\110"+
    "\1\0\1\110\22\0\20\110\1\122\7\110\3\0\1\110"+
    "\3\0\1\110\2\0\1\110\1\0\1\110\22\0\26\110"+
    "\1\123\1\110\3\0\1\110\3\0\1\110\2\0\1\110"+
    "\1\0\1\110\22\0\17\110\1\124\10\110\3\0\1\110"+
    "\3\0\1\110\2\0\1\110\1\0\1\110\22\0\22\110"+
    "\1\125\5\110\3\0\1\110\3\0\1\110\2\0\1\110"+
    "\1\0\1\110\22\0\25\110\1\126\2\110\3\0\1\110"+
    "\3\0\1\110\2\0\1\110\1\0\1\110\22\0\13\110"+
    "\1\111\14\110\3\0\1\110\3\0\1\110\2\0\1\110"+
    "\1\0\1\110\22\0\22\110\1\127\5\110\3\0\1\110"+
    "\3\0\1\110\2\0\1\110\1\0\1\110\22\0\20\110"+
    "\1\130\7\110\3\0\1\110\3\0\1\110\2\0\1\110"+
    "\1\0\1\110\22\0\10\110\1\131\17\110\1\132\2\0"+
    "\1\110\3\0\1\110\2\0\1\110\1\0\1\110\22\0"+
    "\23\110\1\133\4\110\3\0\1\110\3\0\1\110\2\0"+
    "\1\110\1\0\1\110\22\0\10\110\1\134\17\110\1\135"+
    "\2\0\1\110\3\0\1\110\2\0\1\110\1\0\1\110"+
    "\22\0\10\110\1\136\17\110\1\137\2\0\1\110\3\0"+
    "\1\110\2\0\1\110\1\0\1\110\41\0\1\140\71\0"+
    "\1\141\64\0\1\142\45\0\35\74\2\0\3\74\2\0"+
    "\23\74\44\75\1\143\22\75\5\0\1\144\37\0\1\77"+
    "\26\0\1\145\66\0\1\146\126\0\1\102\1\0\1\147"+
    "\17\0\35\103\2\0\3\103\2\0\23\103\35\106\2\0"+
    "\3\106\2\0\23\106\1\0\30\150\3\0\1\150\3\0"+
    "\1\150\2\0\1\150\1\0\1\150\22\0\13\150\1\151"+
    "\14\150\3\0\1\150\3\0\1\150\2\0\1\150\1\0"+
    "\1\150\22\0\1\152\27\150\3\0\1\150\3\0\1\150"+
    "\2\0\1\150\1\0\1\150\22\0\21\150\1\153\6\150"+
    "\1\0\1\132\1\0\1\150\3\0\1\150\2\0\1\150"+
    "\1\0\1\150\22\0\10\150\1\154\17\150\1\155\2\0"+
    "\1\150\3\0\1\150\2\0\1\150\1\0\1\150\22\0"+
    "\1\150\1\156\26\150\3\0\1\150\3\0\1\150\2\0"+
    "\1\150\1\0\1\150\22\0\4\150\1\151\23\150\3\0"+
    "\1\150\3\0\1\150\2\0\1\150\1\0\1\150\26\0"+
    "\1\70\62\0\4\150\1\157\23\150\3\0\1\150\3\0"+
    "\1\150\2\0\1\150\1\0\1\150\22\0\21\150\1\160"+
    "\6\150\1\0\1\161\1\0\1\150\3\0\1\150\2\0"+
    "\1\150\1\0\1\150\22\0\1\162\27\150\3\0\1\150"+
    "\3\0\1\150\2\0\1\150\1\0\1\150\22\0\13\150"+
    "\1\163\14\150\3\0\1\150\3\0\1\150\2\0\1\150"+
    "\1\0\1\150\22\0\4\150\1\164\23\150\3\0\1\150"+
    "\3\0\1\150\2\0\1\150\1\0\1\150\22\0\1\165"+
    "\27\150\3\0\1\150\3\0\1\150\2\0\1\150\1\0"+
    "\1\150\22\0\23\150\1\166\4\150\3\0\1\150\3\0"+
    "\1\150\2\0\1\150\1\0\1\150\22\0\10\150\1\167"+
    "\17\150\1\170\2\0\1\150\3\0\1\150\2\0\1\150"+
    "\1\0\1\150\22\0\21\150\1\151\6\150\1\0\1\70"+
    "\1\0\1\150\3\0\1\150\2\0\1\150\1\0\1\150"+
    "\43\0\1\70\7\0\1\70\35\0\4\150\1\171\23\150"+
    "\3\0\1\150\3\0\1\150\2\0\1\150\1\0\1\150"+
    "\22\0\3\150\1\151\24\150\3\0\1\150\3\0\1\150"+
    "\2\0\1\150\1\0\1\150\25\0\1\70\63\0\13\150"+
    "\1\172\14\150\3\0\1\150\3\0\1\150\2\0\1\150"+
    "\1\0\1\150\35\0\1\117\66\0\1\173\57\0\1\174"+
    "\72\0\1\170\17\0\1\170\35\0\41\75\1\104\2\75"+
    "\1\143\22\75\45\0\1\175\1\176\23\0\1\177\112\0"+
    "\1\200\44\0\1\144\37\0\1\147\22\0\30\201\3\0"+
    "\1\201\3\0\1\201\2\0\1\201\1\0\1\201\22\0"+
    "\12\201\1\202\15\201\2\0\1\70\1\201\3\0\1\201"+
    "\2\0\1\201\1\0\1\201\22\0\21\201\1\202\6\201"+
    "\1\0\1\70\1\0\1\201\3\0\1\201\2\0\1\201"+
    "\1\0\1\201\22\0\14\201\1\203\13\201\3\0\1\201"+
    "\3\0\1\201\2\0\1\201\1\0\1\201\36\0\1\204"+
    "\52\0\13\201\1\205\14\201\3\0\1\201\3\0\1\201"+
    "\2\0\1\201\1\0\1\201\22\0\15\201\1\206\12\201"+
    "\3\0\1\201\3\0\1\201\2\0\1\201\1\0\1\201"+
    "\22\0\4\201\1\207\23\201\3\0\1\201\3\0\1\201"+
    "\2\0\1\201\1\0\1\201\26\0\1\210\62\0\3\201"+
    "\1\211\24\201\3\0\1\201\3\0\1\201\2\0\1\201"+
    "\1\0\1\201\22\0\4\201\1\212\23\201\3\0\1\201"+
    "\3\0\1\201\2\0\1\201\1\0\1\201\22\0\20\201"+
    "\1\213\7\201\3\0\1\201\3\0\1\201\2\0\1\201"+
    "\1\0\1\201\22\0\20\201\1\214\7\201\3\0\1\201"+
    "\3\0\1\201\2\0\1\201\1\0\1\201\22\0\20\201"+
    "\1\215\7\201\3\0\1\201\3\0\1\201\2\0\1\201"+
    "\1\0\1\201\22\0\15\201\1\216\12\201\3\0\1\201"+
    "\3\0\1\201\2\0\1\201\1\0\1\201\37\0\1\217"+
    "\51\0\4\201\1\202\23\201\3\0\1\201\3\0\1\201"+
    "\2\0\1\201\1\0\1\201\26\0\1\220\102\0\1\221"+
    "\112\0\1\175\32\0\1\155\17\0\1\155\36\0\1\222"+
    "\66\0\30\223\3\0\1\223\3\0\1\223\2\0\1\223"+
    "\1\0\1\223\22\0\1\224\27\223\3\0\1\223\3\0"+
    "\1\223\2\0\1\223\1\0\1\223\22\0\1\225\66\0"+
    "\4\223\1\226\23\223\3\0\1\223\3\0\1\223\2\0"+
    "\1\223\1\0\1\223\22\0\3\223\1\227\24\223\3\0"+
    "\1\223\3\0\1\223\2\0\1\223\1\0\1\223\22\0"+
    "\4\223\1\230\23\223\3\0\1\223\3\0\1\223\2\0"+
    "\1\223\1\0\1\223\22\0\14\223\1\231\13\223\3\0"+
    "\1\223\3\0\1\223\2\0\1\223\1\0\1\223\22\0"+
    "\5\223\1\232\22\223\3\0\1\223\3\0\1\223\2\0"+
    "\1\223\1\0\1\223\22\0\20\223\1\233\7\223\3\0"+
    "\1\223\3\0\1\223\2\0\1\223\1\0\1\223\22\0"+
    "\15\223\1\226\12\223\3\0\1\223\3\0\1\223\2\0"+
    "\1\223\1\0\1\223\22\0\6\223\1\226\21\223\3\0"+
    "\1\223\3\0\1\223\2\0\1\223\1\0\1\223\30\0"+
    "\1\70\74\0\1\234\57\0\1\235\64\0\1\100\63\0"+
    "\30\236\3\0\1\236\3\0\1\236\2\0\1\236\1\0"+
    "\1\236\22\0\13\236\1\237\14\236\3\0\1\236\3\0"+
    "\1\236\2\0\1\236\1\0\1\236\35\0\1\210\53\0"+
    "\21\236\1\240\6\236\1\0\1\70\1\0\1\236\3\0"+
    "\1\236\2\0\1\236\1\0\1\236\22\0\2\236\1\241"+
    "\25\236\3\0\1\236\3\0\1\236\2\0\1\236\1\0"+
    "\1\236\22\0\4\236\1\242\23\236\3\0\1\236\3\0"+
    "\1\236\2\0\1\236\1\0\1\236\22\0\1\243\27\236"+
    "\3\0\1\236\3\0\1\236\2\0\1\236\1\0\1\236"+
    "\22\0\1\244\27\236\3\0\1\236\3\0\1\236\2\0"+
    "\1\236\1\0\1\236\26\0\1\245\62\0\1\246\66\0"+
    "\30\247\3\0\1\247\3\0\1\247\2\0\1\247\1\0"+
    "\1\247\22\0\10\247\1\250\17\247\1\155\2\0\1\247"+
    "\3\0\1\247\2\0\1\247\1\0\1\247\22\0\15\247"+
    "\1\251\12\247\3\0\1\247\3\0\1\247\2\0\1\247"+
    "\1\0\1\247\22\0\2\247\1\252\25\247\3\0\1\247"+
    "\3\0\1\247\2\0\1\247\1\0\1\247\22\0\27\247"+
    "\1\253\3\0\1\247\3\0\1\247\2\0\1\247\1\0"+
    "\1\247\37\0\1\254\53\0\1\117\64\0\30\255\3\0"+
    "\1\255\3\0\1\255\2\0\1\255\1\0\1\255\22\0"+
    "\14\255\1\256\13\255\3\0\1\255\3\0\1\255\2\0"+
    "\1\255\1\0\1\255\22\0\22\255\1\257\5\255\3\0"+
    "\1\255\3\0\1\255\2\0\1\255\1\0\1\255\22\0"+
    "\4\255\1\260\23\255\3\0\1\255\3\0\1\255\2\0"+
    "\1\255\1\0\1\255\44\0\1\132\44\0\30\261\3\0"+
    "\1\261\3\0\1\261\2\0\1\261\1\0\1\261\22\0"+
    "\1\262\27\261\3\0\1\261\3\0\1\261\2\0\1\261"+
    "\1\0\1\261\22\0\21\261\1\263\6\261\1\0\1\70"+
    "\1\0\1\261\3\0\1\261\2\0\1\261\1\0\1\261"+
    "\22\0\30\264\3\0\1\264\3\0\1\264\2\0\1\264"+
    "\1\0\1\264\22\0\13\264\1\265\14\264\3\0\1\264"+
    "\3\0\1\264\2\0\1\264\1\0\1\264\22\0\30\266"+
    "\3\0\1\266\3\0\1\266\2\0\1\266\1\0\1\266"+
    "\22\0\30\267\3\0\1\267\3\0\1\267\2\0\1\267"+
    "\1\0\1\267\22\0\30\270\3\0\1\270\3\0\1\270"+
    "\2\0\1\270\1\0\1\270\22\0\30\271\3\0\1\271"+
    "\3\0\1\271\2\0\1\271\1\0\1\271\22\0\30\272"+
    "\3\0\1\272\3\0\1\272\2\0\1\272\1\0\1\272"+
    "\22\0\30\273\3\0\1\273\3\0\1\273\2\0\1\273"+
    "\1\0\1\273\22\0\30\274\3\0\1\274\3\0\1\274"+
    "\2\0\1\274\1\0\1\274\22\0\30\275\3\0\1\275"+
    "\3\0\1\275\2\0\1\275\1\0\1\275\22\0\30\276"+
    "\3\0\1\276\3\0\1\276\2\0\1\276\1\0\1\276"+
    "\22\0\30\277\3\0\1\277\3\0\1\277\2\0\1\277"+
    "\1\0\1\277\22\0\30\300\3\0\1\300\3\0\1\300"+
    "\2\0\1\300\1\0\1\300\22\0\30\301\3\0\1\301"+
    "\3\0\1\301\2\0\1\301\1\0\1\301\22\0\30\302"+
    "\3\0\1\302\3\0\1\302\2\0\1\302\1\0\1\302"+
    "\22\0\30\303\3\0\1\303\3\0\1\303\2\0\1\303"+
    "\1\0\1\303\22\0\30\304\3\0\1\304\3\0\1\304"+
    "\2\0\1\304\1\0\1\304\22\0\30\305\3\0\1\305"+
    "\3\0\1\305\2\0\1\305\1\0\1\305\22\0\30\306"+
    "\3\0\1\306\3\0\1\306\2\0\1\306\1\0\1\306"+
    "\22\0\30\307\3\0\1\307\3\0\1\307\2\0\1\307"+
    "\1\0\1\307\22\0\30\310\3\0\1\310\3\0\1\310"+
    "\2\0\1\310\1\0\1\310\22\0\30\311\3\0\1\311"+
    "\3\0\1\311\2\0\1\311\1\0\1\311\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9735];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\2\1\1\11\2\1\1\11"+
    "\36\1\1\11\3\0\1\1\2\0\1\1\4\0\1\11"+
    "\3\0\7\1\1\0\12\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\1\6\0\5\1\1\0\3\1\1\0\6\1"+
    "\1\0\2\1\2\0\1\1\3\0\3\1\1\0\3\1"+
    "\1\11\6\1\4\0\2\1\1\0\6\1\2\0\7\1"+
    "\2\0\5\1\1\0\34\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public File archivoSalida;
private RandomAccessFile raf;
public void Abrir() throws FileNotFoundException{
    raf = new RandomAccessFile(archivoSalida,"rw");
}

public void Cerrar() throws IOException{
    raf.close();
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 266) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
    try{raf.writeBytes("*** Error linea " + Integer.toString(yyline) + ". *** Caracter no reconocido: " + yytext() + " \n");} catch(IOException ex){}
            }
          case 10: break;
          case 2: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+"Identificador \r\n");
        } catch(IOException ex){}
            }
          case 11: break;
          case 3: 
          case 12: break;
          case 4: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+" Operador \r\n");
        } catch(IOException ex){}
            }
          case 13: break;
          case 5: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+" Caracter \r\n");
        } catch(IOException ex){}
            }
          case 14: break;
          case 6: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+" Palabra reservada \r\n");
    } catch(IOException ex){}
            }
          case 15: break;
          case 7: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+" Comentario \r\n");
        } catch(IOException ex){}
            }
          case 16: break;
          case 8: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+"Constante \r\n");
        } catch(IOException ex){}
            }
          case 17: break;
          case 9: 
            { try{
        raf.writeBytes("Simbolo: " + yytext() + " Fila: " + Integer.toString(yyline) + " Columna: "+ Integer.toString(yycolumn)+" Tipo String \r\n");
        } catch(IOException ex){}
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
